{% from "zabbix/map.jinja" import zabbix with context -%}
{% set settings = salt['pillar.get']('zabbix-proxy', {}) -%}
# Managed by saltstack
# this is a configuration file for zabbix server process
# to get more information about zabbix,
# visit http://www.zabbix.com

############ GENERAL PARAMETERS #################
{% if zabbix.version_repo < '2.4' -%}
### Option: NodeID
#   Unique NodeID in distributed setup.
#   0 - standalone server
#
{% if settings.get('nodeid', false) %}NodeID={{ settings.get('nodeid') }}{% endif %}
{% endif %}

### Option: ListenPort
#	Listen port for trapper.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# ListenPort=10051
{% if settings.get('listenport', false) %}ListenPort={{ settings.get('listenport') }}{% endif %}

### Option: SourceIP
#	Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
# SourceIP=
{% if settings.get('sourceip', false) %}SourceIP={{ settings.get('sourceip') }}{% endif %}

{% if zabbix.version_repo >= '3.0' -%}
### Option: LogType
#	Specifies where log messages are written to:
#		system  - syslog
#		file    - file specified with LogFile parameter
#		console - standard output
#
{% if settings.get('logtype', false) %}LogType={{ settings.get('logtype') }}{% endif %}
{% endif %}

### Option: LogFile
#	Log file name for LogType 'file' parameter.
#
{% if settings.get('logfile', 'syslog') != "syslog" %}LogFile={{ settings.get('logfile', '/var/log/zabbix/zabbix_server.log') }}{% endif %}

### Option: LogFileSize
#	Maximum size of log file in MB.
#	0 - disable automatic log rotation.
#
LogFileSize={{ settings.get('logfilesize', '0') }}

### Option: DebugLevel
#	Specifies debug level:
#	0 - basic information about starting and stopping of Zabbix processes
#	1 - critical information
#	2 - error information
#	3 - warnings
#	4 - for debugging (produces lots of information)
{% if zabbix.version_repo >= '3.0' -%}
#	5 - extended debugging (produces even more information)
{% endif %}
DebugLevel={{ settings.get('debuglevel', '3') }}

### Option: PidFile
#	Name of PID file.
#
PidFile={{ settings.get('pidfile', '/var/run/zabbix/zabbix_server.pid') }}

### Option: DBHost
#	Database host name.
#	If set to localhost, socket is used for MySQL.
#	If set to empty string, socket is used for PostgreSQL.
#
DBHost={{ settings.get('dbhost', 'localhost') }}

### Option: DBName
#	Database name.
#	For SQLite3 path to database file must be provided. DBUser and DBPassword are ignored.
#
DBName={{ settings.get('dbname', 'zabbix') }}

### Option: DBSchema
#	Schema name. Used for IBM DB2 and PostgreSQL.
#
{% if settings.get('dbschema', false) %}DBSchema={{ settings.get('dbschema') }}{% endif %}

### Option: DBUser
#	Database user. Ignored for SQLite.
#
DBUser={{ settings.get('dbuser', 'zabbixuser') }}

### Option: DBPassword
#	Database password. Ignored for SQLite.
#	Comment this line if no password is used.
#
DBPassword={{ settings.get('dbpass', 'zabbixpass') }}

### Option: DBSocket
#	Path to MySQL socket.
#
DBSocket={{ settings.get('dbsocket', '/var/run/mysqld/mysqld.sock') }}

### Option: DBPort
#	Database port when not using local socket. Ignored for SQLite.
#
{% if settings.get('dbport', false) %}DBPort={{ settings.get('dbport') }}{% endif %}

############ ADVANCED PARAMETERS ################

### Option: StartPollers
#	Number of pre-forked instances of pollers.
#
{% if settings.get('startpollers', false) %}StartPollers={{ settings.get('startpollers') }}{% endif %}

### Option: StartIPMIPollers
#	Number of pre-forked instances of IPMI pollers.
#
{% if settings.get('startipmipollers', false) %}StartIPMIPollers={{ settings.get('startipmipollers') }}{% endif %}

### Option: StartPollersUnreachable
#	Number of pre-forked instances of pollers for unreachable hosts (including IPMI and Java).
#	At least one poller for unreachable hosts must be running if regular, IPMI or Java pollers
#	are started.
#
{% if settings.get('startpollersunreachable', false) %}StartPollersUnreachable={{ settings.get('startpollersunreachable') }}{% endif %}

### Option: StartTrappers
#	Number of pre-forked instances of trappers.
#	Trappers accept incoming connections from Zabbix sender, active agents and active proxies.
#	At least one trapper process must be running to display server availability and view queue
#	in the frontend.
#
{% if settings.get('starttrappers', false) %}StartTrappers={{ settings.get('starttrappers') }}{% endif %}

### Option: StartPingers
#	Number of pre-forked instances of ICMP pingers.
#
{% if settings.get('startpingers', false) %}StartPingers={{ settings.get('startpingers') }}{% endif %}

### Option: StartDiscoverers
#	Number of pre-forked instances of discoverers.
#
{% if settings.get('startdiscoverers', false) %}StartDiscoverers={{ settings.get('startdiscoverers') }}{% endif %}

### Option: StartHTTPPollers
#	Number of pre-forked instances of HTTP pollers.
#
{% if settings.get('starthttppollers', false) %}StartHTTPPollers={{ settings.get('starthttppollers') }}{% endif %}

### Option: StartTimers
#	Number of pre-forked instances of timers.
#	Timers process time-based trigger functions and maintenance periods.
#	Only the first timer process handles the maintenance periods.
#
{% if settings.get('starttimers', false) %}StartTimers={{ settings.get('starttimers') }}{% endif %}

{% if zabbix.version_repo >= '3.0' -%}
### Option: StartEscalators
#   Number of pre-forked instances of escalators.
#
{% if settings.get('startescalators', false) %}StartEscalators={{ settings.get('startescalators') }}{% endif %}
{% endif %}

{% if settings.get('javagateway', false) %}
### Option: JavaGateway
#	IP address (or hostname) of Zabbix Java gateway.
#	Only required if Java pollers are started.
#
{% if settings.get('javagateway', false) %}JavaGateway={{ settings.get('javagateway') }}{% endif %}

### Option: JavaGatewayPort
#	Port that Zabbix Java gateway listens on.
#
{% if settings.get('javagatewayport', false) %}JavaGatewayPort={{ settings.get('javagatewayport') }}{% endif %}

### Option: StartJavaPollers
#	Number of pre-forked instances of Java pollers.
#
{% if settings.get('startjavapollers', false) %}StartJavaPollers={{ settings.get('startjavapollers') }}{% endif %}
{% endif %}

### Option: StartVMwareCollectors
#	Number of pre-forked vmware collector instances.
#
{% if settings.get('startvmwarecollectors', false) %}StartVMwareCollectors={{ settings.get('startvmwarecollectors') }}{% endif %}

### Option: VMwareFrequency
#	How often Zabbix will connect to VMware service to obtain a new data.
#
{% if settings.get('vmwarefrequency', false) %}VMwareFrequency={{ settings.get('vmwarefrequency') }}{% endif %}

### Option: VMwarePerfFrequency
#   How often Zabbix will connect to VMware service to obtain performance data.
#
{% if settings.get('vmwareperffrequency', false) %}VMwarePerfFrequency={{ settings.get('vmwareperffrequency') }}{% endif %}

### Option: VMwareCacheSize
#   Size of VMware cache, in bytes.
#   Shared memory size for storing VMware data.
#   Only used if VMware collectors are started.
#
{% if settings.get('vmwarecachesize', false) %}VMwareCacheSize={{ settings.get('vmwarecachesize') }}{% endif %}

### Option: VMwareTimeout
#   Specifies how many seconds vmware collector waits for response from VMware service.
#
{% if settings.get('vmwaretimeout', false) %}VMwareTimeout={{ settings.get('vmwaretimeout') }}{% endif %}

{% if zabbix.version_repo < '2.4' -%}
### Option: EnableSNMPBulkRequests
#   Enable or disable SNMP bulk requests.
#   0 - disable
#   1 - enable
#
{% if settings.get('enablesnmpbulkrequests', false) %}EnableSNMPBulkRequests={{ settings.get('enablesnmpbulkrequests') }}{% endif %}
{% endif %}

### Option: SNMPTrapperFile
#   Temporary file used for passing data from SNMP trap daemon to the server.
#   Must be the same as in zabbix_trap_receiver.pl or SNMPTT configuration file.
#
{% if settings.get('snmptrapperfile', false) %}SNMPTrapperFile={{ settings.get('snmptrapperfile') }}{% endif %}

### Option: StartSNMPTrapper
#   If 1, SNMP trapper process is started.
#
{% if settings.get('startsnmptrapper', false) %}StartSNMPTrapper={{ settings.get('startsnmptrapper') }}{% endif %}

### Option: ListenIP
#   List of comma delimited IP addresses that the trapper should listen on.
#   Trapper will listen on all network interfaces if this parameter is missing.
#
{% if settings.get('listenip', false) %}ListenIP={{ settings.get('listenip') }}{% endif %}

### Option: HousekeepingFrequency
#   How often Zabbix will perform housekeeping procedure (in hours).
#   Housekeeping is removing outdated information from the database.
#   To prevent Housekeeper from being overloaded, no more than 4 times HousekeepingFrequency
#   hours of outdated information are deleted in one housekeeping cycle, for each item.
#   To lower load on server startup housekeeping is postponed for 30 minutes after server start.
{% if zabbix.version_repo >= '3.0' -%}
#	With HousekeepingFrequency=0 the housekeeper can be only executed using the runtime control option.
#	In this case the period of outdated information deleted in one housekeeping cycle is 4 times the
#	period since the last housekeeping cycle, but not less than 4 hours and not greater than 4 days.
{% endif %}
#
{% if settings.get('housekeepingfrequency', false) %}HousekeepingFrequency={{ settings.get('housekeepingfrequency') }}{% endif %}

### Option: MaxHousekeeperDelete
#   The table "housekeeper" contains "tasks" for housekeeping procedure in the format:
#   [housekeeperid], [tablename], [field], [value].
#   No more than 'MaxHousekeeperDelete' rows (corresponding to [tablename], [field], [value])
#   will be deleted per one task in one housekeeping cycle.
#   SQLite3 does not use this parameter, deletes all corresponding rows without a limit.
#   If set to 0 then no limit is used at all. In this case you must know what you are doing!
#
{% if settings.get('maxhousekeeperdelete', false) %}MaxHousekeeperDelete={{ settings.get('maxhousekeeperdelete') }}{% endif %}

### Option: SenderFrequency
#   How often Zabbix will try to send unsent alerts (in seconds).
#
{% if settings.get('senderfrequency', false) %}SenderFrequency={{ settings.get('senderfrequency') }}{% endif %}

### Option: CacheSize
#   Size of configuration cache, in bytes.
#   Shared memory size for storing host, item and trigger data.
#
{% if settings.get('cachesize', false) %}CacheSize={{ settings.get('cachesize') }}{% endif %}

### Option: CacheUpdateFrequency
#   How often Zabbix will perform update of configuration cache, in seconds.
#
{% if settings.get('cacheupdatefrequency', false) %}CacheUpdateFrequency={{ settings.get('cacheupdatefrequency') }}{% endif %}

### Option: StartDBSyncers
#   Number of pre-forked instances of DB Syncers
#
{% if settings.get('startdbsyncers', false) %}StartDBSyncers={{ settings.get('startdbsyncers') }}{% endif %}

### Option: HistoryCacheSize
#   Size of history cache, in bytes.
#   Shared memory size for storing history data.
#
{% if settings.get('historycachesize', false) %}HistoryCacheSize={{ settings.get('historycachesize') }}{% endif %}

{% if zabbix.version_repo >= '3.0' -%}
### Option: HistoryIndexCacheSize
#   Size of history index cache, in bytes.
#   Shared memory size for indexing history cache.
#
{% if settings.get('historyindexcachesize', false) %}HistoryIndexCacheSize={{ settings.get('historyindexcachesize') }}{% endif %}
{% endif %}

### Option: TrendCacheSize
#   Size of trend cache, in bytes.
#   Shared memory size for storing trends data.
#
{% if settings.get('trendcachesize', false) %}TrendCacheSize={{ settings.get('trendcachesize') }}{% endif %}

{% if zabbix.version_repo <= '2.4' -%}
### Option: HistoryTextCacheSize
#   Size of text history cache, in bytes.
#   Shared memory size for storing character, text or log history data.
#
{% if settings.get('historytextcachesize', false) %}HistoryTextCacheSize={{ settings.get('historytextcachesize') }}{% endif %}
{% endif %}

### Option: ValueCacheSize
#   Size of history value cache, in bytes.
#   Shared memory size for caching item history data requests.
#   Setting to 0 disables value cache.
#
{% if settings.get('valuecachesize', false) %}ValueCacheSize={{ settings.get('valuecachesize') }}{% endif %}

{% if zabbix.version_repo < '2.4' -%}
### Option: NodeNoEvents
#   If set to '1' local events won't be sent to master node.
#   This won't impact ability of this node to propagate events from its child nodes.
#
{% if settings.get('nodenoevents', false) %}NodeNoEvents={{ settings.get('nodenoevents') }}{% endif %}

### Option: NodeNoHistory
#   If set to '1' local history won't be sent to master node.
#   This won't impact ability of this node to propagate history from its child nodes.
#
{% if settings.get('nodenohistory', false) %}NodeNoHistory={{ settings.get('nodenohistory') }}{% endif %}
{% endif %}

### Option: Timeout
#   Specifies how long we wait for agent, SNMP device or external check (in seconds).
#
{% if settings.get('timeout', false) %}Timeout={{ settings.get('timeout') }}{% endif %}

### Option: TrapperTimeout
#   Specifies how many seconds trapper may spend processing new data.
#
{% if settings.get('trappertimeout', false) %}TrapperTimeout={{ settings.get('trappertimeout') }}{% endif %}

### Option: UnreachablePeriod
#   After how many seconds of unreachability treat a host as unavailable.
#
{% if settings.get('unreachableperiod', false) %}UnreachablePeriod={{ settings.get('unreachableperiod') }}{% endif %}

### Option: UnavailableDelay
#   How often host is checked for availability during the unavailability period, in seconds.
#
{% if settings.get('unavailabledelay', false) %}UnavailableDelay={{ settings.get('unavailabledelay') }}{% endif %}

### Option: UnreachableDelay
#   How often host is checked for availability during the unreachability period, in seconds.
#
{% if settings.get('unreachabledelay', false) %}UnreachableDelay={{ settings.get('unreachabledelay') }}{% endif %}

### Option: AlertScriptsPath
#   Full path to location of custom alert scripts.
#   Default depends on compilation options.
#
AlertScriptsPath={{ settings.get('alertscriptspath', '/usr/lib/zabbix/alertscripts') }}

### Option: ExternalScripts
#   Full path to location of external scripts.
#   Default depends on compilation options.
#
ExternalScripts={{ settings.get('externalscripts', '/usr/lib/zabbix/externalscripts') }}

### Option: FpingLocation
#   Location of fping.
#   Make sure that fping binary has root ownership and SUID flag set.
#
{% if settings.get('fpinglocation', false) %}FpingLocation={{ settings.get('fpinglocation') }}{% endif %}

### Option: Fping6Location
#   Location of fping6.
#   Make sure that fping6 binary has root ownership and SUID flag set.
#   Make empty if your fping utility is capable to process IPv6 addresses.
#
{% if settings.get('fping6location', false) %}Fping6Location={{ settings.get('fping6location') }}{% endif %}

### Option: SSHKeyLocation
#   Location of public and private keys for SSH checks and actions.
#
{% if settings.get('sshkeylocation', false) %}SSHKeyLocation={{ settings.get('sshkeylocation') }}{% endif %}

### Option: LogSlowQueries
#   How long a database query may take before being logged (in milliseconds).
#   Only works if DebugLevel set to 3 or 4<% if @zabbix_version.to_f >= 3.0 %> or 5<% end %>.
#   0 - don't log slow queries.
#
{% if settings.get('logslowqueries', false) %}LogSlowQueries={{ settings.get('logslowqueries') }}{% endif %}

### Option: TmpDir
#   Temporary directory.
#
{% if settings.get('tmpdir', false) %}TmpDir={{ settings.get('tmpdir') }}{% endif %}

### Option: StartProxyPollers
#   Number of pre-forked instances of pollers for passive proxies.
#
{% if settings.get('startproxypollers', false) %}StartProxyPollers={{ settings.get('startproxypollers') }}{% endif %}

### Option: ProxyConfigFrequency
#   How often Zabbix Server sends configuration data to a Zabbix Proxy in seconds.
#   This parameter is used only for proxies in the passive mode.
#
{% if settings.get('proxyconfigfrequency', false) %}ProxyConfigFrequency={{ settings.get('proxyconfigfrequency') }}{% endif %}

### Option: ProxyDataFrequency
#   How often Zabbix Server requests history data from a Zabbix Proxy in seconds.
#   This parameter is used only for proxies in the passive mode.
#
{% if settings.get('proxydatafrequency', false) %}ProxyDataFrequency={{ settings.get('proxydatafrequency') }}{% endif %}

### Option: AllowRoot
#   Allow the server to run as 'root'. If disabled and the server is started by 'root', the server
#   will try to switch to the user specified by the User configuration option instead.
#   Has no effect if started under a regular user.
#   0 - do not allow
#   1 - allow
#
{% if settings.get('allowroot', false) %}AllowRoot={{ settings.get('allowroot') }}{% endif %}

### Option: User
#   Drop privileges to a specific, existing user on the system.
#   Only has effect if run as 'root' and AllowRoot is disabled.
#
# Mandatory: no
# Default:
# User=zabbix
{% if settings.get('user', false) %}User={{ settings.get('user') }}{% endif %}

### Option: Include
#   You may include individual files or all files in a directory in the configuration file.
#   Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.
#
{% if settings.get('include', false) %}Include={{ settings.get('include') }}{% endif %}

{% if zabbix.version_repo >= '2.4' -%}
### Option: SSLCertLocation
#   Location of SSL client certificates.
#   This parameter is used only in web monitoring.
#
{% if settings.get('sslcertlocation', false) %}SSLCertLocation={{ settings.get('sslcertlocation') }}{% endif %}

### Option: SSLKeyLocation
#   Location of private keys for SSL client certificates.
#   This parameter is used only in web monitoring.
#
{% if settings.get('sslkeylocation', false) %}SSLKeyLocation={{ settings.get('sslkeylocation') }}{% endif %}

### Option: SSLCALocation
#   Override the location of certificate authority (CA) files for SSL server certificate verification.
#   If not set, system-wide directory will be used.
#   This parameter is used only in web monitoring.
#
{% if settings.get('sslcalocation', false) %}SSLCALocation={{ settings.get('sslcalocation') }}{% endif %}
{% endif %}

####### LOADABLE MODULES #######

### Option: LoadModulePath
#   Full path to location of server modules.
#   Default depends on compilation options.
#
{% if settings.get('loadmodulepath', false) %}LoadModulePath={{ settings.get('loadmodulepath') }}{% endif %}

### Option: LoadModule
#   Module to load at server startup. Modules are used to extend functionality of the server.
#   Format: LoadModule=<module.so>
#   The modules must be located in directory specified by LoadModulePath.
#   It is allowed to include multiple LoadModule parameters.
#
{% if settings.get('loadmodule', false) %}LoadModule={{ settings.get('loadmodule') }}{% endif %}

{% if zabbix.version_repo >= '3.0' -%}
####### TLS-RELATED PARAMETERS #######

### Option: TLSCAFile
#	Full pathname of a file containing the top-level CA(s) certificates for
#	peer certificate verification.
#
# Mandatory: no
# Default:
# TLSCAFile=
{% if settings.get('tlscafile', false) %}TLSCAFile={{ settings.get('tlscafile') }}{% endif %}

### Option: TLSCRLFile
#	Full pathname of a file containing revoked certificates.
#
# Mandatory: no
# Default:
# TLSCRLFile=
{% if settings.get('tlscrlfile', false) %}TLSCRLFile={{ settings.get('tlscrlfile') }}{% endif %}

### Option: TLSCertFile
#	Full pathname of a file containing the server certificate or certificate chain.
#
# Mandatory: no
# Default:
# TLSCertFile=
{% if settings.get('tlscertfile', false) %}TLSCertFile={{ settings.get('tlscertfile') }}{% endif %}

### Option: TLSKeyFile
#	Full pathname of a file containing the server private key.
#
# Mandatory: no
# Default:
# TLSKeyFile=
{% if settings.get('tlskeyfile', false) %}TLSKeyFile={{ settings.get('tlskeyfile') }}{% endif %}
{% endif %}
